<?php namespace {{NS}};

use Request\Manager\Mangre;

class {{NAME}}Manager extends Mangre {

  /**
   * fill
   *
   * @var string
   * @access protected
   * defaults to the $fillable array from the model
   * change to only fill specific fields on create and update
   */
   // protected $fill = [{{FILL}}];

  /**
   * fill
   *
   * @var array
   * @access protected
   * defaults to an empty array
   * every input passed to the manager will be sanitize using laralvels e() function, to skip some keys add them to the array
   * an use case is CKEDITOR
   */
   // protected $sanitizeSkip = [];


  /**
   * defaults ( inspired by Rob )
   *
   * @var array
   * @access protected
   * defaults to an empty array
   * set a default value for eny property that doesn't exist in the provided input
   */
   // protected $defaults = ['propertyName' => 'defaultValue'];

  /**
   * model
   *
   * @var string
   * @access protected
   * defaults to the this class name without the `Manager` string, eg: UserManager outputs User
   * result should be a class Model
   * change to use a different Model
   */
   // protected $model = "{{MODEL}}";


  /**
   * transforms
   * populate the arrray with fileds that are not required for updating a model  eg: password, image_url,
   * if array is key => value than the key is the field and the value is a callback that alters the fields in some way eg: password => Hash@make
   * @var mixed
   * @access protected
   */
   // protected $transforms = ["password" => "Hash@make"];


  /**
   * validates
   *
   * @var mixed
   * @access protected
   * defaults to true
   * change to false to skip the validator
   */
   // protected $validates = {{VALIDATES}};

  /**
   * validator
   *
   * @var string
   * @access protected
   * will search a Validator Class in the namespace set in the config file + name of the model  + Validator , eg: \ACME\Validators\UserValidator
   * change to use a different Validator (with the namespace)
   */
   // protected $validator = "{{VALIDATOR}}";



  /**
   * errorType
   *
   * @var string
   * @access protected
   * defaults to the $configuration array
   * change to use a different Response when validator failes
   */
   // protected $errorType = false; // view or json

   /**
   * EVENT HOOKS
   *
   * @access public
   * @attach extra data to this class
   * @params $input is the array of data passed to the manager
   * @params $entry is the eloquent model that the manager works on

    public function afterConstruct() {
      $this->time = time();
    }

    public function afterConstruct()  { }

    public function beforeCreate($input) { }
    public function afterCreate($input, $entry) { }

    public function beforeUpdate($input, $entry) { }
    public function afterUpdate($input, $entry)  { }

    public function beforeDelete($entry) { }
    public function afterDelete($entry)  { }
   */

   /**
   * BINDED MANAGERS

   * @access protected
   * @bind more managers together to insert in more tables at the same time
   * there ar 2 variations :
   * i) a play array
   * ii) a  function thats returns an array
   * need to return a set list of arrays where the key is the nextManager to bind
     and the value is another array with 3 optional values
     - first is the eloquent relationship
     - second is the data .... if its a string it will try to find the data in the passed data to ma manager , if array it will use that instead
     - third value working with a one to many relationship .. this parament is the id of the record from the many table.. must be an array  ['relation_id' => value]

     protected $bindManagerCreate = [];
     protected $bindManagerUpdate = [];

     protected function bindManagerCreate($input) {
       return [
          "ManagerName" => ['eloquentRelationship', 'input']
       ];
     }
     protected function bindManagerUpdate($input) {
       return [
          "ManagerName" => ['eloquentRelationship', 'input']
       ];
     }

     public function beforeBindCreate($input, $entry) { }
     public function afterBindCreate($input, $entry)  { }

     public function beforeBindUpdate($input, $entry) { }
     public function afterBindUpdate($input, $entry)  { }
   **/
}
